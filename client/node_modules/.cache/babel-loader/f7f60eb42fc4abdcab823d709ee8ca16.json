{"ast":null,"code":"var _jsxFileName = \"/home/ingvaldinho/projet/react-ecommerce/src/component/sign-in/sign-in.component.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      \"email\": '',\n      \"password\": \"\"\n    };\n  }\n\n  render() {\n    const onGoogleSignInStart = this.props.onGoogleSignInStart;\n    return React.createElement(SignInContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(SignInTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      handleChange: this.handleChange,\n      value: this.state.email,\n      label: \"email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      label: \"password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(ButtonsBarContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Sign in \"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: onGoogleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Sign in with Google\"))));\n  }\n\n}\n\nconst mapDispachToProps = dispach => ({\n  onGoogleSignInStart: () => dispach(googleSignInStart()),\n  emailSignInStart: (email, password) => dispach(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispachToProps)(SignIn);","map":{"version":3,"sources":["/home/ingvaldinho/projet/react-ecommerce/src/component/sign-in/sign-in.component.jsx"],"names":["React","Component","connect","SignInContainer","SignInTitle","ButtonsBarContainer","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","constructor","props","handleSubmit","event","preventDefault","state","email","password","handleChange","target","name","value","setState","render","onGoogleSignInStart","mapDispachToProps","dispach"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n  } from './sign-in.styles';\n  \nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport {googleSignInStart,emailSignInStart} from '../../redux/user/user.actions';\n\n\nclass SignIn extends Component{\n    constructor(props){\n        super(props);\n\n        this.state= {\n            \"email\": '',\n            \"password\":\"\"\n        }\n    }\n\n   \n\n    handleSubmit= async (event)=>{\n        event.preventDefault();\n        const {email,password} = this.state;\n\n\n    }\n\n    handleChange= (event)=>{\n        const {name,value} = event.target;\n\n        this.setState({[name]:value});\n    }\n\n    render() {\n      const {onGoogleSignInStart} = this.props;\n        return (\n          <SignInContainer>\n            <SignInTitle>I already have an account</SignInTitle>\n            <span>Sign in with your email and password</span>\n    \n            <form onSubmit={this.handleSubmit}>\n              <FormInput\n                name='email'\n                type='email'\n                handleChange={this.handleChange}\n                value={this.state.email}\n                label='email'\n                required\n              />\n              <FormInput\n                name='password'\n                type='password'\n                value={this.state.password}\n                handleChange={this.handleChange}\n                label='password'\n                required\n              />\n              <ButtonsBarContainer>\n                <CustomButton type='submit'> Sign in </CustomButton>\n                <CustomButton type='button' onClick={onGoogleSignInStart} isGoogleSignIn>\n                  Sign in with Google\n                </CustomButton>\n              </ButtonsBarContainer>\n            </form>\n          </SignInContainer>\n        );\n      }\n}\n\nconst mapDispachToProps = dispach => ({\n  onGoogleSignInStart: ()=>dispach(googleSignInStart()),\n  emailSignInStart: (email,password)=> dispach(emailSignInStart({email,password}))\n})\n\nexport default connect(null,mapDispachToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}