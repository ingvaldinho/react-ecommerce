{"ast":null,"code":"import _defineProperty from \"/home/ingvaldinho/projet/react-ecommerce/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyAWHLu1k65qWMo1LwAp6ggwDSPOX4ZVlKI\",\n  authDomain: \"react-ecommerce-db-9f66c.firebaseapp.com\",\n  databaseURL: \"https://react-ecommerce-db-9f66c.firebaseio.com\",\n  projectId: \"react-ecommerce-db-9f66c\",\n  storageBucket: \"react-ecommerce-db-9f66c.appspot.com\",\n  messagingSenderId: \"199730805843\",\n  appId: \"1:199730805843:web:a1063839073f03cc2ddaa6\",\n  measurementId: \"G-FCF53Y6PJP\"\n};\nfirebase.initializeApp(config);\nexport const createUserprofileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //  DocumentReference is used to perform CRUD Operation\n\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid)); // console.log(userRef);\n\n  const userSnapChot = await userRef.get();\n\n  if (!userSnapChot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // console.log('User SnapChot : ', userSnapChot); \n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionSnapChotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          name = _doc$data.name;\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst GoogleAuthProvider = new firebase.auth.GoogleAuthProvider();\nGoogleAuthProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(GoogleAuthProvider);\nexport default firebase;","map":{"version":3,"sources":["/home/ingvaldinho/projet/react-ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserprofileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapChot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapChotToMap","collections","transformedCollection","docs","map","data","title","name","auth","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,0CAFD;AAGXC,EAAAA,WAAW,EAAE,iDAHF;AAIXC,EAAAA,SAAS,EAAE,0BAJA;AAKXC,EAAAA,aAAa,EAAE,sCALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWET,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAGA,OAAO,MAAMU,yBAAyB,GAAG,OAAMC,QAAN,EAAeC,cAAf,KAAgC;AACvE,MAAG,CAACD,QAAJ,EAAc,OADyD,CAG3E;;AACI,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAAhB,CAJuE,CAKvE;;AAEA,QAAMC,YAAY,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAA3B;;AAEA,MAAG,CAACD,YAAY,CAACE,MAAjB,EAAwB;AAAA,UACbC,WADa,GACQT,QADR,CACbS,WADa;AAAA,UACDC,KADC,GACQV,QADR,CACDU,KADC;AAEpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR;AACFJ,QAAAA,WADE;AAEFC,QAAAA,KAFE;AAGFC,QAAAA;AAHE,SAICV,cAJD,EAAN;AAMH,KAPD,CAOE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AAEH;AAEJ,GAzBsE,CA0BvE;;;AACA,SAAOf,OAAP;AAED,CA7BM;AA+BP,OAAO,MAAMgB,yBAAyB,GAAG,OAAMC,aAAN,EAAoBC,YAApB,KAAmC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACA,QAAME,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AAEAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAoBD,GAApB;AACH,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AAEH,CAbM;AAeP,OAAO,MAAMC,8BAA8B,GAAIC,WAAD,IAAe;AACzD,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqB5B,GAAG,IAAI;AAAA,sBACjCA,GAAG,CAAC6B,IAAJ,EADiC;AAAA,UAC/CC,KAD+C,aAC/CA,KAD+C;AAAA,UACzCC,IADyC,aACzCA,IADyC;AAEzD,GAF6B,CAA9B;AAGH,CAJM;AAOP,OAAO,MAAMC,IAAI,GAAGhD,QAAQ,CAACgD,IAAT,EAAb;AACP,OAAO,MAAMjC,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMkC,kBAAkB,GAAG,IAAIjD,QAAQ,CAACgD,IAAT,CAAcC,kBAAlB,EAA3B;AAEAA,kBAAkB,CAACC,mBAAnB,CAAuC;AAACC,EAAAA,MAAM,EAAC;AAAR,CAAvC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAKJ,IAAI,CAACK,eAAL,CAAqBJ,kBAArB,CAA9B;AAEP,eAAejD,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyAWHLu1k65qWMo1LwAp6ggwDSPOX4ZVlKI\",\n    authDomain: \"react-ecommerce-db-9f66c.firebaseapp.com\",\n    databaseURL: \"https://react-ecommerce-db-9f66c.firebaseio.com\",\n    projectId: \"react-ecommerce-db-9f66c\",\n    storageBucket: \"react-ecommerce-db-9f66c.appspot.com\",\n    messagingSenderId: \"199730805843\",\n    appId: \"1:199730805843:web:a1063839073f03cc2ddaa6\",\n    measurementId: \"G-FCF53Y6PJP\"\n  }\n\n  firebase.initializeApp(config);\n\n\n  export const createUserprofileDocument = async(userAuth,additionalData)=>{\n    if(!userAuth) return;\n\n//  DocumentReference is used to perform CRUD Operation\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    // console.log(userRef);\n\n    const userSnapChot = await userRef.get();\n\n    if(!userSnapChot.exists){\n        const {displayName,email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message)\n            \n        }\n        \n    }\n    // console.log('User SnapChot : ', userSnapChot); \n    return userRef;\n    \n  }\n\n  export const addCollectionAndDocuments = async(collectionKey,objectsToAdd)=>{\n      const collectionRef = firestore.collection(collectionKey);\n\n      console.log(collectionRef);\n      const batch = firestore.batch();\n\n      objectsToAdd.forEach(obj => {\n          const newDocRef = collectionRef.doc()\n          batch.set(newDocRef,obj);\n      })\n\n      return await batch.commit();\n\n  }\n\n  export const convertCollectionSnapChotToMap = (collections)=>{\n      const transformedCollection = collections.docs.map(doc => {\n          const {title,name} = doc.data()\n      })\n  }\n\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const GoogleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\n  GoogleAuthProvider.setCustomParameters({prompt:'select_account'});\n\n  export const signInWithGoogle = ()=> auth.signInWithPopup(GoogleAuthProvider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}